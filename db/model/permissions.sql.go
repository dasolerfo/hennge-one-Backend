// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: permissions.sql

package db

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (user_id, client_id, allowed)
VALUES ($1, $2, $3)
RETURNING id, user_id, client_id, allowed, granted_at
`

type CreatePermissionParams struct {
	UserID   int32  `json:"user_id"`
	ClientID string `json:"client_id"`
	Allowed  bool   `json:"allowed"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, arg.UserID, arg.ClientID, arg.Allowed)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Allowed,
		&i.GrantedAt,
	)
	return i, err
}

const getPermissionByUserAndClient = `-- name: GetPermissionByUserAndClient :one
SELECT id, user_id, client_id, allowed, granted_at FROM permissions
WHERE user_id = $1 AND client_id = $2
`

type GetPermissionByUserAndClientParams struct {
	UserID   int32  `json:"user_id"`
	ClientID string `json:"client_id"`
}

func (q *Queries) GetPermissionByUserAndClient(ctx context.Context, arg GetPermissionByUserAndClientParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByUserAndClient, arg.UserID, arg.ClientID)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Allowed,
		&i.GrantedAt,
	)
	return i, err
}
