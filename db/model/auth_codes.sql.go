// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth_codes.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAuthCode = `-- name: CreateAuthCode :one
INSERT INTO auth_codes (
    code, client_id, redirect_uri, sub, scope, code_challenge, nonce, expires_at
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8 ) RETURNING code, client_id, redirect_uri, sub, scope, code_challenge, nonce, created_at, expires_at, used
`

type CreateAuthCodeParams struct {
	Code          string         `json:"code"`
	ClientID      int64          `json:"client_id"`
	RedirectUri   string         `json:"redirect_uri"`
	Sub           string         `json:"sub"`
	Scope         sql.NullString `json:"scope"`
	CodeChallenge sql.NullString `json:"code_challenge"`
	Nonce         sql.NullString `json:"nonce"`
	ExpiresAt     time.Time      `json:"expires_at"`
}

func (q *Queries) CreateAuthCode(ctx context.Context, arg CreateAuthCodeParams) (AuthCode, error) {
	row := q.db.QueryRowContext(ctx, createAuthCode,
		arg.Code,
		arg.ClientID,
		arg.RedirectUri,
		arg.Sub,
		arg.Scope,
		arg.CodeChallenge,
		arg.Nonce,
		arg.ExpiresAt,
	)
	var i AuthCode
	err := row.Scan(
		&i.Code,
		&i.ClientID,
		&i.RedirectUri,
		&i.Sub,
		&i.Scope,
		&i.CodeChallenge,
		&i.Nonce,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Used,
	)
	return i, err
}

const getAuthCode = `-- name: GetAuthCode :one
SELECT code, client_id, redirect_uri, sub, scope, code_challenge, nonce, created_at, expires_at, used FROM auth_codes 
WHERE code = $1 AND expires_at > now()
`

func (q *Queries) GetAuthCode(ctx context.Context, code string) (AuthCode, error) {
	row := q.db.QueryRowContext(ctx, getAuthCode, code)
	var i AuthCode
	err := row.Scan(
		&i.Code,
		&i.ClientID,
		&i.RedirectUri,
		&i.Sub,
		&i.Scope,
		&i.CodeChallenge,
		&i.Nonce,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Used,
	)
	return i, err
}

const setCodeUsed = `-- name: SetCodeUsed :exec
UPDATE auth_codes set used = TRUE WHERE code = $1
`

func (q *Queries) SetCodeUsed(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, setCodeUsed, code)
	return err
}
