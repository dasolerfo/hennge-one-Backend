// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clients.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, client_name, client_secret, redirect_uris)
VALUES ($1, $2, $3, $4)
RETURNING id, client_name, client_secret, redirect_uris, created_at
`

type CreateClientParams struct {
	ID           string   `json:"id"`
	ClientName   string   `json:"client_name"`
	ClientSecret string   `json:"client_secret"`
	RedirectUris []string `json:"redirect_uris"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.ClientName,
		arg.ClientSecret,
		pq.Array(arg.RedirectUris),
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientName,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.CreatedAt,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, client_name, client_secret, redirect_uris, created_at FROM clients
WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientName,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.CreatedAt,
	)
	return i, err
}
