// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clients.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, client_source, client_name, client_secret, redirect_uris)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, client_source, client_name, client_secret, redirect_uris, created_at
`

type CreateClientParams struct {
	ID           int64    `json:"id"`
	ClientSource string   `json:"client_source"`
	ClientName   string   `json:"client_name"`
	ClientSecret string   `json:"client_secret"`
	RedirectUris []string `json:"redirect_uris"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.ClientSource,
		arg.ClientName,
		arg.ClientSecret,
		pq.Array(arg.RedirectUris),
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientSource,
		&i.ClientName,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.CreatedAt,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, client_source, client_name, client_secret, redirect_uris, created_at FROM clients
WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientSource,
		&i.ClientName,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.CreatedAt,
	)
	return i, err
}

const getClientBysource = `-- name: GetClientBysource :one
SELECT id, client_source, client_name, client_secret, redirect_uris, created_at FROM clients
WHERE client_source = $1
`

func (q *Queries) GetClientBysource(ctx context.Context, clientSource string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientBysource, clientSource)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientSource,
		&i.ClientName,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.CreatedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, client_source, client_name, client_secret, redirect_uris, created_at FROM clients
ORDER BY id
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.ClientSource,
			&i.ClientName,
			&i.ClientSecret,
			pq.Array(&i.RedirectUris),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
